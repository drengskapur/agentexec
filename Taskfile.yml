# =============================================================================
# Global Configuration
# =============================================================================
version: '3'

output: prefixed
silent: false
interval: 5s
set: [pipefail]
shopt: [globstar]

# =============================================================================
# Variables
# =============================================================================
vars:
  BINARY_NAME: agentexec
  BUILD_DIR: build
  MAIN_GO: main.go
  VERSION:
    sh: git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.1"
  COMMIT:
    sh: git rev-parse --short HEAD
  BUILDTIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: >-
    -s -w
    -X 'agentexec/pkg/version.Version={{.VERSION}}'
    -X 'agentexec/pkg/version.Commit={{.COMMIT}}'
    -X 'agentexec/pkg/version.BuildTime={{.BUILDTIME}}'

# =============================================================================
# Tasks
# =============================================================================
tasks:
  default:
    desc: Build the application
    cmds:
      - task: build

# =============================================================================
# Build Tasks
# =============================================================================
  build:
    desc: Build for the current platform
    deps: [build:check-deps]
    preconditions:
      - sh: go version
        msg: "Go must be installed"
    cmds:
      - echo "üì¶ Building {{.BINARY_NAME}} for current platform..."
      - mkdir -p {{.BUILD_DIR}}
      - go build -trimpath -ldflags="{{.LDFLAGS}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}
      - echo "‚úÖ Build complete"
      - mkdir -p $HOME/.local/bin
      - cp {{.BUILD_DIR}}/{{.BINARY_NAME}} $HOME/.local/bin/{{.BINARY_NAME}}
      - agentexec version

  build:check-deps:
    desc: Check and install build dependencies
    vars:
      COMPRESS: gzip  # Default to gzip
    cmds:
      - |
        # Check for pigz
        if command -v pigz >/dev/null 2>&1; then
          echo "‚úÖ pigz is available"
          set -- -E COMPRESS=pigz
        else
          echo "‚ö†Ô∏è  pigz not found, installing..."
          task install-tools:pigz
          if command -v pigz >/dev/null 2>&1; then
            set -- -E COMPRESS=pigz
          else
            echo "‚ö†Ô∏è  Using gzip as fallback"
            set -- -E COMPRESS=gzip
          fi
        fi

        # Check for zip (needed for Windows builds)
        if ! command -v zip >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  zip not found, installing..."
          task install-tools:zip
        fi

  build:cross:
    desc: Build binaries for multiple platforms
    deps: [clean:build, build:check-deps]
    vars:
      COMPRESS:
        sh: command -v pigz >/dev/null 2>&1 && echo "pigz" || echo "gzip"
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "üì¶ Using {{.COMPRESS}} for compression"

        # Create source archive first
        echo "üì¶ Creating source archive..."
        tar --exclude='.git' \
            --exclude='{{.BUILD_DIR}}' \
            --exclude='dist' \
            -cf - . | {{.COMPRESS}} > "{{.BUILD_DIR}}/{{.BINARY_NAME}}-src.tar.gz"

        # Initialize SHASUMS256.txt with header
        echo "# {{.BINARY_NAME}} checksums" > "{{.BUILD_DIR}}/SHASUMS256.txt"

        # Add checksum for source archive with only the filename
        checksum=$(shasum -a 256 "{{.BUILD_DIR}}/{{.BINARY_NAME}}-src.tar.gz" | awk '{print $1}')
        filename="{{.BINARY_NAME}}-src.tar.gz"
        echo "$checksum  $filename" >> "{{.BUILD_DIR}}/SHASUMS256.txt"

        # Define the build matrix
        BUILDS=(
          "darwin amd64 tar.gz"
          "darwin arm64 tar.gz"
          "linux 386 tar.gz"
          "linux amd64 tar.gz"
          "linux arm64 tar.gz"
          "linux arm tar.gz"
          "windows 386 zip"
          "windows amd64 zip"
          "windows arm64 zip"
        )

        for build in "${BUILDS[@]}"; do
          read -r os arch format <<< "$build"
          
          echo "üî® Building for $os/$arch..."
          
          # Set binary extension for Windows
          bin_ext=""
          if [ "$os" = "windows" ]; then
            bin_ext=".exe"
          fi

          # Determine output binary name and path
          binary_name="{{.BINARY_NAME}}-${os}-${arch}${bin_ext}"
          binary_path="{{.BUILD_DIR}}/${binary_name}"

          # Build the binary in the project root
          GOOS=$os GOARCH=$arch go build \
            -trimpath \
            -mod=vendor \
            -ldflags="{{.LDFLAGS}}" \
            -o "$binary_path" \
            .

          # Create archive name
          output_name="{{.BINARY_NAME}}-${os}-${arch}"
          if [ "$os" = "linux" ] && [ "$arch" = "arm" ]; then
            output_name="{{.BINARY_NAME}}-${os}-armv6l"
          fi

          # Create archive path relative to BUILD_DIR
          archive_name="${output_name}.${format}"
          archive_path="{{.BUILD_DIR}}/${archive_name}"

          # Create archive
          if [ "$format" = "zip" ]; then
            zip -q "$archive_path" "$binary_path"
          else
            tar -cf - "$binary_path" | {{.COMPRESS}} > "$archive_path"
          fi

          # Add to SHASUMS256.txt with only the filename
          checksum=$(shasum -a 256 "$archive_path" | awk '{print $1}')
          filename="${output_name}.${format}"
          echo "$checksum  $filename" >> "{{.BUILD_DIR}}/SHASUMS256.txt"

          # Clean up binary
          rm "$binary_path"
        done

        # Sort checksums (preserve header)
        {
          head -n1 "{{.BUILD_DIR}}/SHASUMS256.txt"
          tail -n +2 "{{.BUILD_DIR}}/SHASUMS256.txt" | sort
        } > "{{.BUILD_DIR}}/SHASUMS256.txt.tmp"
        mv "{{.BUILD_DIR}}/SHASUMS256.txt.tmp" "{{.BUILD_DIR}}/SHASUMS256.txt"

      - echo "‚úÖ Cross-compilation complete. Archives are in {{.BUILD_DIR}}/"
      - task: build:verify

  build:verify:
    desc: Verify builds
    cmds:
      - |
        set -e  # Exit immediately if a command exits with a non-zero status
        echo "üîç Verifying checksums..."

        # Change directory to BUILD_DIR for relative checksum verification
        cd "{{.BUILD_DIR}}"

        # Verify checksums
        shasum -a 256 -c SHASUMS256.txt

        echo "üìÅ File listing in {{.BUILD_DIR}}:"
        ls -lh



# =============================================================================
# Test Tasks
# =============================================================================
  test:
    desc: Run tests with coverage
    cmds:
      - echo "üß™ Running tests with coverage..."
      - mkdir -p coverage
      - |
        go test ./... -race -coverprofile=coverage/coverage.out \
          && go tool cover -html=coverage/coverage.out -o coverage/coverage.html

# =============================================================================
# Code Quality Tasks
# =============================================================================
  lint:
    desc: Run linters
    deps: [lint:check]
    cmds:
      - echo "üîç Linting code..."
      - golangci-lint run ./...
      - task: fmt

  lint:check:
    desc: Ensure linter is installed
    preconditions:
      - sh: which golangci-lint
        msg: "golangci-lint is not installed. Run 'task deps' first."

  fmt:
    desc: Format code
    cmds:
      - echo "üßπ Formatting code..."
      - go fmt ./...
      - gofmt -s -w .

# =============================================================================
# Cleanup Tasks
# =============================================================================
  clean:
    desc: Clean all artifacts
    cmds:
      - echo "üßπ Cleaning all artifacts..."
      - rm -rf {{.BUILD_DIR}} coverage dist

  clean:build:
    desc: Clean build directory
    cmds:
      - rm -rf {{.BUILD_DIR}}

# =============================================================================
# Installation & Setup Tasks
# =============================================================================
  deps:
    desc: Install all dependencies
    cmds:
      - task: deps:go-download
      - task: install-tools

  deps:go-download:
    desc: Download Go modules
    cmds:
      - echo "üì¶ Downloading Go modules..."
      - go mod download

  install-tools:
    desc: Install development tools
    cmds:
      - |
        declare -A tools=(
          ["golangci-lint"]="github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
          ["godoc"]="golang.org/x/tools/cmd/godoc@latest"
          ["goreleaser"]="github.com/goreleaser/goreleaser@latest"
        )
        
        for tool in "${!tools[@]}"; do
          if ! command -v "$tool" >/dev/null 2>&1; then
            echo "üîß Installing $tool..."
            go install "${tools[$tool]}"
          else
            echo "‚úÖ $tool already installed"
          fi
        done
      - task: install-tools:system-deps

  install-tools:system-deps:
    desc: Install system dependencies
    cmds:
      - |
        for tool in "pigz" "zip"; do
          if ! command -v $tool >/dev/null 2>&1; then
            echo "üîß Installing $tool..."
            if command -v apt-get >/dev/null 2>&1; then
              sudo apt-get update && sudo apt-get install -y $tool
            elif command -v brew >/dev/null 2>&1; then
              brew install $tool
            elif command -v yum >/dev/null 2>&1; then
              sudo yum install -y $tool
            else
              echo "‚ùå Could not install $tool automatically. Please install manually."
              exit 1
            fi
          fi
        done

# =============================================================================
# Release Tasks
# =============================================================================
  release:
    desc: Create a new release
    deps: [goreleaser:check]
    cmds:
      - task: goreleaser:snapshot

  goreleaser:check:
    desc: Check GoReleaser installation
    preconditions:
      - sh: command -v goreleaser
        msg: "GoReleaser is not installed. Run 'task install-tools' first."

  goreleaser:snapshot:
    desc: Run GoReleaser in snapshot mode
    cmds:
      - echo "üöÄ Testing GoReleaser build..."
      - goreleaser release --snapshot --clean --skip-publish

# =============================================================================
# Development Tasks
# =============================================================================
  run:
    desc: Run the application
    deps: [build]
    interactive: true
    cmds:
      - echo "üèÉ Running {{.BINARY_NAME}}..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}}



# =============================================================================
# Setup Tasks
# =============================================================================
  setup:
    desc: Setup development environment
    cmds:
      - task: setup:golang
      - task: setup:ensure-path
      - task: deps

  setup:golang:
    desc: Install or update Go
    vars:
      GO_VERSION:
        sh: curl -sSL https://go.dev/VERSION?m=text | head -n1
    cmds:
      - |
        install_go() {
          OS="$(uname | tr '[:upper:]' '[:lower:]')"
          ARCH="$(uname -m)"
          case "${ARCH}" in
            x86_64|amd64) ARCH="amd64" ;;
            arm64|aarch64) ARCH="arm64" ;;
            *) echo "Unsupported architecture: ${ARCH}"; exit 1 ;;
          esac

          TMP_DIR=$(mktemp -d)
          trap 'rm -rf "$TMP_DIR"' EXIT
          cd "$TMP_DIR"

          curl -fsSL "https://go.dev/dl/{{.GO_VERSION}}.${OS}-${ARCH}.tar.gz" -o go.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go.tar.gz
        }

        if ! command -v go &>/dev/null; then
          echo "Installing Go {{.GO_VERSION}}..."
          install_go
        else
          CURRENT_VERSION="$(go version | awk '{print $3}')"
          if [ "$CURRENT_VERSION" != "{{.GO_VERSION}}" ]; then
            echo "Updating Go from $CURRENT_VERSION to {{.GO_VERSION}}..."
            install_go
          fi
        fi
      - task: setup:go-verify

  setup:go-verify:
    desc: Verify Go installation
    cmds:
      - |
        if ! command -v go &>/dev/null; then
          echo "‚ùå Go installation failed"
          exit 1
        fi
        echo "‚úÖ Go $(go version) is installed"

  setup:ensure-path:
    desc: "üîß Ensure $HOME/.local/bin exists and is included in PATH"
    cmds:
      - mkdir -p "$HOME/.local/bin"
      - |
        for rc in ~/.bashrc ~/.zshrc; do
          if [ -f "$rc" ]; then
            if ! grep -Fxq 'export PATH="$HOME/.local/bin:$PATH"' "$rc"; then
              echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$rc"
              echo "‚úÖ Added $HOME/.local/bin to $rc"
            else
              echo "‚úÖ $HOME/.local/bin is already in $rc"
            fi
          else
            echo "‚ö†Ô∏è $rc does not exist. Skipping..."
          fi
        done
