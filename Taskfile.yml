version: '3'

# Global configurations
output: prefixed
silent: false
interval: 5s
set: [pipefail]
shopt: [globstar]

# Global variables for reusability
vars:
  BINARY_NAME: omnivex
  BUILD_DIR: build
  MAIN_GO: main.go
  VERSION:
    sh: git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1"
  COMMIT:
    sh: git rev-parse --short HEAD
  BUILDTIME:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  LDFLAGS: >-
    -X 'omnivex/pkg/version.Version={{.VERSION}}'
    -X 'omnivex/pkg/version.Commit={{.COMMIT}}'
    -X 'omnivex/pkg/version.BuildTime={{.BUILDTIME}}'
  exeExt:
    sh: |
      case "{{.OS}}" in
        windows) echo ".exe" ;;
        *) echo "" ;;
      esac

# Tasks
tasks:
  default:
    desc: Build the application
    deps: [lint, test]
    cmds:
      - task: build

  build:
    desc: Build the Go application with versioning
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}{{.exeExt}}"
    preconditions:
      - sh: go version
        msg: "Go must be installed"
    cmds:
      - echo "📦 Building {{.BINARY_NAME}}..."
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags="{{.LDFLAGS}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}}{{.exeExt}} {{.MAIN_GO}}

  run:
    desc: Run the Go application
    deps: [build]
    interactive: true
    cmds:
      - echo "🏃 Running {{.BINARY_NAME}}..."
      - ./{{.BUILD_DIR}}/{{.BINARY_NAME}}{{.exeExt}} {{.CLI_ARGS}}

  test:
    desc: Run tests with coverage report
    deps: [test:run, test:coverage]
    cmds: []

  test:run:
    desc: Execute Go tests
    sources:
      - "**/*.go"
      - "**/*_test.go"
    cmds:
      - echo "🧪 Running tests..."
      - go test ./... -v -race

  test:coverage:
    desc: Generate coverage report
    deps: [test:run]
    cmds:
      - mkdir -p {{.BUILD_DIR}}/coverage
      - go test ./... -coverprofile={{.BUILD_DIR}}/coverage/coverage.out
      - go tool cover -html={{.BUILD_DIR}}/coverage/coverage.out -o {{.BUILD_DIR}}/coverage/coverage.html

  lint:
    desc: Lint the code using golangci-lint
    deps: [lint:check, lint:run]
    cmds: []

  lint:check:
    desc: Ensure 'golangci-lint' is installed
    preconditions:
      - sh: which golangci-lint
        msg: "golangci-lint is not installed. Run 'task deps' first."
    cmds: []

  lint:run:
    desc: Execute golangci-lint
    sources:
      - "**/*.go"
      - .golangci.yml
    cmds:
      - echo "🔍 Linting code..."
      - golangci-lint run ./...

  fmt:
    desc: Format the code
    deps: [fmt:go, fmt:gofmt]
    cmds: []

  fmt:go:
    desc: Run 'go fmt'
    sources:
      - "**/*.go"
    cmds:
      - echo "🧹 Formatting code with go fmt..."
      - go fmt ./...

  fmt:gofmt:
    desc: Run 'gofmt -s -w .'
    cmds:
      - echo "🧹 Simplifying and formatting code with gofmt..."
      - gofmt -s -w .

  autofix:
    desc: Automatically fix formatting and linting issues
    deps: [autofix:lint-fix, autofix:tidy]
    cmds: []

  autofix:lint-fix:
    desc: Run golangci-lint with autofix
    cmds:
      - echo "🔧 Running golangci-lint with autofix..."
      - golangci-lint run --fix ./...

  autofix:tidy:
    desc: Tidy up dependencies
    cmds:
      - echo "🔄 Tidying up dependencies..."
      - go mod tidy

  clean:
    desc: Clean build artifacts
    deps: [clean:build, clean:coverage]
    cmds:
      - rm -f .godoc.pid

  clean:build:
    desc: Remove build directory
    cmds:
      - echo "🧹 Cleaning build directory..."
      - rm -rf {{.BUILD_DIR}}

  clean:coverage:
    desc: Remove coverage reports
    cmds:
      - echo "🧹 Cleaning coverage reports..."
      - rm -rf {{.BUILD_DIR}}/coverage

  deps:
    desc: Install project dependencies
    deps: [deps:go-download, deps:install-tools]
    cmds: []

  deps:go-download:
    desc: Download Go modules
    cmds:
      - echo "📦 Downloading Go modules..."
      - go mod download

  deps:install-tools:
    desc: Install development tools
    deps: [install-tools:godoc, install-tools:golangci-lint, install-tools:check-curl]
    cmds: []

  install-tools:
    desc: Install development tools
    deps: [install-tools:godoc, install-tools:golangci-lint, install-tools:check-curl]
    cmds: []

  install-tools:golangci-lint:
    desc: Install 'golangci-lint'
    cmds:
      - echo "🔧 Installing 'golangci-lint'..."
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

  install-tools:godoc:
    desc: Install 'godoc' tool
    cmds:
      - echo "🔧 Installing 'godoc'..."
      - go install golang.org/x/tools/cmd/godoc@latest

  install-tools:check-curl:
    desc: Ensure 'curl' is installed
    cmds:
      - |
        if ! command -v curl >/dev/null 2>&1; then
          echo "❌ 'curl' is not installed. Please install it using your package manager."
          exit 1
        else
          echo "✅ 'curl' is installed."
        fi

  update-deps:
    desc: Update project dependencies
    prompt: This will update all dependencies. Continue?
    deps: [update-deps:go-get, update-deps:mod-tidy]
    cmds: []

  update-deps:go-get:
    desc: Update Go modules
    cmds:
      - echo "🔄 Updating dependencies with go get..."
      - go get -u ./...

  update-deps:mod-tidy:
    desc: Tidy Go modules
    cmds:
      - echo "🔄 Tidy up Go modules..."
      - go mod tidy

  docker:build:
    desc: Build Docker image with versioning
    deps: [docker:check, docker:build-image]
    cmds: []

  docker:check:
    desc: Ensure Docker is installed
    preconditions:
      - sh: docker version
        msg: "Docker must be installed"
    cmds: []

  docker:build-image:
    desc: Execute Docker build
    cmds:
      - echo "🐳 Building Docker image..."
      - |
        docker build \
          --build-arg VERSION={{.VERSION}} \
          --build-arg COMMIT={{.COMMIT}} \
          --build-arg BUILDTIME={{.BUILDTIME}} \
          -t {{.BINARY_NAME}}:{{.VERSION}} \
          -t {{.BINARY_NAME}}:latest .

  release:
    desc: Create and push a new release
    deps: [release:precheck, release:create-tag, release:push-tag]
    cmds: []

  release:precheck:
    desc: Ensure working directory is clean
    preconditions:
      - sh: git diff-index --quiet HEAD
        msg: "Working directory is not clean. Commit or stash changes first."
    cmds: []

  release:create-tag:
    desc: Create Git tag
    vars:
      TAG:
        sh: git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1"
    cmds:
      - echo "🔖 Creating Git tag {{.TAG}}..."
      - git tag {{.TAG}}

  release:push-tag:
    desc: Push Git tag to origin
    vars:
      TAG:
        sh: git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1"
    cmds:
      - git push origin {{.TAG}}

  watch:
    desc: Watch for changes and rebuild
    watch: true
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    cmds:
      - task: build
